{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","AddAuthorForm.js","index.js"],"names":["Hero","className","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","title","Book","key","onClick","Continue","Footer","id","href","AuthorQuiz","turnData","to","Boolean","window","location","hostname","match","AddAuthorForm","JSON","stringify","state","authors","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","answer","sample","find","some","getTurnData","name","imageSource","imageAttribution","isCorrect","book","render","App","ReactDOM","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e71b0b0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './AuthorQuiz.css';\nimport './bootstrap.min.css';\n\nfunction Hero() {\n  return (<div className=\"row\">\n    <div className=\"jumbotron col-10 offset-1\">\n      <h1>Author Quiz</h1>\n      <p>Select the book written by author shown</p>\n    </div>\n  </div>);\n}\n\nfunction Turn({author, books, highlight, onAnswerSelected}) {\n  function highlightToBgColor(highlight) {\n    const mapping = {\n      'none': '',\n      'correct': 'green',\n      'wrong': 'red'\n    };\n    return mapping[highlight];\n  }\n\n \n  return (<div className=\"row turn\" style={{backgroundColor: highlightToBgColor(highlight)}}>\n    <div className=\"col-4 offset-1\">\n      <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\" />\n    </div>\n    <div className=\"col-6\">\n      {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\n    </div>\n  </div>);\n}\n\nTurn.propTypes = {\n  author: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    imageUrl: PropTypes.string.isRequired,\n    imageSource: PropTypes.string.isRequired,\n    books: PropTypes.arrayOf(PropTypes.string).isRequired\n  }),\n  books: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  highlight: PropTypes.string.isRequired\n}\n\nfunction Continue() {\n  return (<div />);\n}\n\nfunction Footer() {\n  return (<div id=\"footer\" className=\"row\">\n    <div className=\"col-12\">\n      <p className=\"text-muted credit\">\n        All images are from <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikimedia Commons</a> and are in the public domain\n      </p>\n    </div>\n  </div>);\n}\n\nfunction Book({title, onClick}) {\n  return (<div className=\"answer\" onClick={() => {onClick(title);}}>\n    <h4>{title}</h4>\n  </div>);\n}\n\nfunction AuthorQuiz({turnData, highlight, onAnswerSelected}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero />\n      <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected} />\n      <Continue />\n      <p><Link to=\"/add\">Add an author</Link></p>\n      <Footer />\n    </div>\n  );\n}\n\nexport default AuthorQuiz;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nfunction AddAuthorForm({match}) {\n    return (\n      <div>\n        <h1>Add Author</h1>\n        <p>{JSON.stringify(match)}</p>\n      </div>\n    );\n  }\n\n  export default AddAuthorForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport AddAuthorForm from './AddAuthorForm';\n\nconst authors = [\n    {\n        name: 'Mark Twain',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['The Adventures of Huckleberry Finn']\n    },\n    {\n        name: 'Joseph Conrad',\n        imageUrl: 'images/authors/josephconrad.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['Heart of Darkness']\n    },\n    {\n        name: 'J.K. Rowling',\n        imageUrl: 'images/authors/jkrowling.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Daniel Ogren',\n        books: ['Harry Potter and the Sorcerers Stone']\n    },\n    {\n        name: 'Stephen King',\n        imageUrl: 'images/authors/stephenking.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Pinguino',\n        books: ['The Shining', 'IT']\n    },\n    {\n        name: 'Charles Dickens',\n        imageUrl: 'images/authors/charlesdickens.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['David Copperfield', 'A Tale of Two Cities']\n    },\n    {\n        name: 'William Shakespeare',\n        imageUrl: 'images/authors/williamshakespeare.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\n    }\n];\n\nconst state = {\n    turnData: getTurnData(authors),\n    highlight: ''\n};\n\nfunction getTurnData(authors) {\n    const allBooks = authors.reduce(function(p, c, i) {\n        return p.concat(c.books);\n    }, []);\n\n    const fourRandomBooks = shuffle(allBooks).slice(0, 4);\n    const answer = sample(fourRandomBooks);\n\n    return {\n        books: fourRandomBooks,\n        author: authors.find((author) => \n            author.books.some((title) => \n                title === answer))\n    }\n}\n\nfunction onAnswerSelected(answer) {\n    const isCorrect = state.turnData.author.books.some((book) => book === answer);\n    state.highlight = isCorrect ? 'correct' : 'wrong';\n    render();\n}\n\nfunction App() {\n    return <AuthorQuiz {...state} onAnswerSelected={onAnswerSelected} />;\n}\n\nfunction render() {\n    ReactDOM.render(<BrowserRouter>\n            <React.Fragment>\n                <Route exact path=\"/\" component={App} />\n                <Route path=\"/add\" component={AddAuthorForm} />\n            </React.Fragment>\n        </BrowserRouter>\n        , document.getElementById('root'));\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}